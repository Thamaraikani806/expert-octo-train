
USE react_users;

CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  productId INT UNIQUE,
  name VARCHAR(100),
  description TEXT,
  price DECIMAL(10,2),
  brand VARCHAR(50),
  image VARCHAR(255),
  status ENUM('active', 'inactive') DEFAULT 'active',
  userId INT,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  firstName VARCHAR(50),
  lastName VARCHAR(50),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  address TEXT,
);

---

 6. Update server.js

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads')); // serve images

const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');

app.use('/mysql-user', userRoutes);
app.use('/mysql-product', productRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


------------------------------------


1. Install Swagger Packages

npm install swagger-jsdoc swagger-ui-express

---

 2. Project Folder Example Structure

project-root/
├── controllers/
│ ├── userController.js
│ └── productController.js
├── models/
│ ├── userModel.js
│ └── productModel.js
├── routes/
│ ├── userRoutes.js
│ └── productRoutes.js
├── .env
├── server.js (All Swagger Docs will go here)


---

 3. Edit server.js (Full Swagger Docs Here)

Here’s a complete working example of server.js with Swagger docs inline:

const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// MySQL Routes
const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');

app.use('/user', userRoutes);
app.use('/product', productRoutes);

// Swagger setup
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Full Stack Product API (MySQL + MongoDB)',
      version: '1.0.0',
      description: 'API docs for user auth and product management system',
    },
    servers: [{ url: 'http://localhost:5000' }],
  },
  apis: [], // Not needed since we define all manually
};

const swaggerSpec = swaggerJsDoc(swaggerOptions);

// Swagger Manual Docs
swaggerSpec.paths = {
  '/user/register': {
    post: {
      summary: 'Register user',
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                firstName: { type: 'string' },
                lastName: { type: 'string' },
                email: { type: 'string' },
                password: { type: 'string' },
              },
            },
          },
        },
      },
      responses: {
        201: { description: 'User registered' },
        400: { description: 'User already exists' },
      },
    },
  },
  '/user/login': {
    post: {
      summary: 'Login user',
      requestBody: {
        required: true,
        content: {
          'application/json': {
            schema: {
              type: 'object',
              properties: {
                email: { type: 'string' },
                password: { type: 'string' },
              },
            },
          },
        },
      },
      responses: {
        200: { description: 'Login success' },
        404: { description: 'User not found' },
      },
    },
  },
  '/product/create': {
    post: {
      summary: 'Create product',
      requestBody: {
        required: true,
        content: {
          'multipart/form-data': {
            schema: {
              type: 'object',
              properties: {
                id: { type: 'number' },
                name: { type: 'string' },
                description: { type: 'string' },
                price: { type: 'string' },
                brand: { type: 'string' },
                image: { type: 'string', format: 'binary' },
              },
            },
          },
        },
      },
      responses: {
        201: { description: 'Product created' },
        400: { description: 'Duplicate product ID' },
      },
    },
  },
  '/product/list': {
    get: {
      summary: 'Get paginated products',
      parameters: [
        { in: 'query', name: 'page', schema: { type: 'integer' }, required: false },
        { in: 'query', name: 'search', schema: { type: 'string' }, required: false },
      ],
      responses: {
        200: { description: 'Product list' },
      },
    },
  },
  '/product/{id}': {
    get: {
      summary: 'Get single product',
      parameters: [{ in: 'path', name: 'id', required: true, schema: { type: 'string' } }],
      responses: {
        200: { description: 'Product found' },
        404: { description: 'Not found' },
      },
    },
    put: {
      summary: 'Update product',
      requestBody: {
        required: true,
        content: {
          'multipart/form-data': {
            schema: {
              type: 'object',
              properties: {
                name: { type: 'string' },
                description: { type: 'string' },
                price: { type: 'string' },
                brand: { type: 'string' },
                image: { type: 'string', format: 'binary' },
              },
            },
          },
        },
      },
      parameters: [{ in: 'path', name: 'id', required: true, schema: { type: 'string' } }],
      responses: {
        200: { description: 'Product updated' },
      },
    },
    delete: {
      summary: 'Delete product',
      parameters: [{ in: 'path', name: 'id', required: true, schema: { type: 'string' } }],
      responses: {
        200: { description: 'Deleted' },
      },
    },
  },
};

// Serve Swagger UI
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(` Server running on http://localhost:${PORT}`);
  console.log(` Swagger docs at http://localhost:${PORT}/api-docs`);
});


---

 Output

Visit:
http://localhost:5000/api-docs


